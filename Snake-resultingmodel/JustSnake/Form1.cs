using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace NeuralNetworkSnake
{
    public partial class Form1 : Form
    {
        static float[,] InToF = { { -0.01918906f, -0.499635f, -0.4839787f, -1f, 1f, -1f, -0.9677431f, -0.5108813f, 0.07125109f, -1f, 0.7933453f, 0.7090961f, -0.7100153f, -0.2843091f, -0.3773397f, 0.8674684f, 0.6074961f, 0.1448946f, -1f, -1f, 0.1282783f, -0.6544255f, -0.05560452f, -0.03174502f, -0.04186314f }, { -0.8608836f, -0.54829f, -0.2473004f, -1f, -0.4415919f, -1f, 0.9287678f, 0.5909356f, 0.8662066f, 0.2636759f, -0.9203508f, -0.05949324f, -0.1576855f, 0.05513778f, 0.9535334f, -0.1363748f, 0.6500354f, -1f, 1f, 0.06064939f, 0.7170517f, -0.3153982f, 1f, -1f, -0.8948461f }, { -1f, 1f, 1f, -0.2551328f, 1f, -0.2627241f, 1f, 0.8668364f, -0.006264567f, -1f, 1f, -0.4430928f, 0.2962058f, -0.4861602f, 0.7257657f, -0.07006815f, 1f, -1f, 0.8803278f, -0.006260306f, 0.553493f, -1f, -0.1265561f, -0.2033581f, 0.008742452f }, { 0.511999f, 0.9474131f, -0.6869403f, 0.2259669f, -1f, 1f, -0.2331216f, 0.4272901f, 0.1081938f, 1f, -0.4801196f, -0.9565686f, 1f, -1f, -1f, -0.06394696f, 0.631997f, -0.1474512f, 0.2363099f, -0.5979971f, 1f, -0.2336775f, 0.6850341f, 0.3490351f, -0.08969255f }, { 0.233551f, 1f, -1f, -0.2282891f, 0.1881001f, -0.5166851f, 0.3340303f, -0.09970963f, -0.1708344f, -0.4576031f, 0.401616f, 0.01965141f, -0.2827985f, -0.9371588f, -1f, -0.834426f, -0.3127972f, 1f, -1f, 0.4586482f, 0.4205099f, -0.7512556f, 1f, -0.9308334f, -0.5874618f }, { 1f, 0.4201271f, -0.6636975f, -0.7620124f, 1f, -0.05631167f, 0.1258534f, 0.6404715f, -1f, 0.07306957f, 1f, -0.9507f, -1f, 0.6956979f, -0.2320113f, 1f, 0.1498968f, -1f, 0.5364388f, 1f, 0.6116111f, -1f, 0.7985804f, -0.1692638f, 0.4256346f }, { -0.9669017f, -0.7557136f, 1f, 0.9102256f, 0.5953925f, -0.7971582f, 1f, -0.4637627f, 0.5311207f, -0.6697164f, 0.7235464f, -0.9937511f, 1f, -0.367675f, -0.7042231f, 0.2073551f, -0.3952632f, 1f, -0.8284515f, -1f, -0.3596805f, 1f, -0.33947f, 0.08678912f, -0.8271806f }, { -0.6210343f, 0.32868f, -0.653471f, 0.7235206f, -1f, 0.2187328f, -0.7435775f, 1f, -1f, -0.06574261f, -0.699154f, -0.2884597f, 0.1467726f, -1f, 1f, 0.2766185f, -0.8060737f, -0.7213989f, 1f, -0.5659349f, 0.775147f, 0.5163068f, 0.3267255f, 0.1629055f, 1f }, { -1f, 1f, -0.1142876f, -0.1780152f, 1f, -0.5563376f, 0.6098372f, 0.1307428f, -1f, -1f, -1f, 0.07363623f, 0.8450801f, -0.1140309f, 0.880353f, -0.9023265f, 1f, -0.5800777f, 0.4749744f, 1f, 0.436764f, 0.1984385f, 0.3246685f, -0.01831496f, -1f }, { -0.09964992f, -1f, 0.03536069f, 0.3728582f, 1f, -0.4472578f, 1f, 1f, 0.5348703f, -0.8022236f, 0.8744628f, -0.6451973f, -1f, -0.3205932f, 0.586122f, 0.4313688f, 0.6438136f, -0.7627158f, 0.6363397f, 1f, -0.4136377f, 0.4571163f, -0.9041711f, 1f, 0.2288291f }, { 0.04342133f, -0.601035f, -0.541949f, -1f, -0.6199629f, -0.2638054f, -1f, -0.9304414f, -0.6917686f, 0.6855369f, -1f, 0.02502662f, 0.03282243f, 1f, 0.9927033f, -0.6499924f, -1f, -0.1781546f, -0.1457581f, 0.4816764f, -0.7264301f, -0.3537422f, 1f, -1f, -1f }, { -0.7236139f, -0.04401149f, 0.2715058f, 0.293744f, -0.5212498f, -0.386013f, -1f, -1f, 1f, 0.3532206f, 1f, -1f, -1f, -0.124962f, -1f, 0.09207074f, 0.1598295f, -1f, 0.6277096f, -0.9908949f, 0.5818467f, -1f, -1f, 1f, 1f }, { 1f, -0.4673108f, -0.9067196f, 1f, -1f, -1f, -1f, -0.4941255f, -0.174643f, -0.2404814f, -0.370196f, -0.270633f, 1f, -0.01679057f, -0.6467574f, 1f, -1f, -0.4400739f, 0.5876048f, -0.9763221f, -0.05045387f, 0.1524075f, 0.7098314f, -0.6974318f, 0.1063516f }, { -1f, -0.0242555f, -0.06162381f, 0.2327187f, -1f, 1f, -0.007134199f, -0.958008f, -0.2975559f, -0.1546299f, 0.3132501f, -1f, 0.4433621f, -0.3097867f, 0.5631652f, -0.1786494f, 0.4988143f, -1f, -0.007605255f, 0.5739183f, -0.1617023f, -0.191171f, 0.6759427f, 0.424496f, -1f }, { -1f, -0.06661329f, 0.1853894f, -1f, 0.6567183f, 1f, 1f, 1f, 0.4930348f, -0.4830295f, -0.4094812f, -0.9970651f, -0.7407879f, 0.7996619f, 0.1807007f, 0.7767253f, -0.8000641f, 1f, -0.009562522f, -1f, 0.7960059f, 1f, 0.8351523f, 0.4971168f, -0.9012065f }, { 0.1090027f, -0.1235758f, -0.5664827f, 1f, 0.4099817f, 0.7434223f, 1f, 0.6108777f, 0.1273776f, -0.274711f, 0.1031987f, -0.732631f, -0.5387605f, 0.1903776f, -0.7658762f, 0.9035965f, 1f, -0.6625987f, -0.6774161f, -0.3677974f, -0.3710728f, -1f, -1f, -0.961099f, 0.6610345f }, { -1f, 0.4601235f, -0.1923252f, 1f, 0.8532463f, 1f, 0.2018926f, -1f, -0.6821101f, -0.475493f, -0.01091133f, -1f, 0.4803664f, -0.1114548f, 1f, -1f, 0.2715006f, -0.4315138f, -0.3694208f, 0.6282778f, 1f, 1f, 1f, 1f, -1f }, { -0.3044155f, 1f, 1f, -0.5971897f, 0.4540175f, 0.4282433f, 0.1768941f, -0.734383f, -0.6550564f, 0.7755255f, 0.8696399f, -0.349187f, 1f, 0.9132975f, -0.5105791f, 0.5826217f, -1f, 1f, -0.781274f, 1f, -0.2038753f, 0.3112838f, 1f, -0.9837462f, -0.5294684f } }
;
        static float[,] FToG = { { -1f, 0.5401548f, -1f, -0.1008202f, -1f, -1f, 0.6395533f, 0.2581799f, -0.8714473f, -0.002453685f, 0.3518633f, 0.3100396f, -1f, -1f, 1f, -0.6688705f, -0.6168891f, 0.03006753f, -0.4016337f }, { -0.1433638f, 0.9343361f, -0.4389665f, 0.008921623f, -0.5779753f, -0.8910054f, 0.4411454f, 0.2656697f, 0.9314994f, -0.2745965f, 0.6809542f, 1f, 0.7513224f, -1f, -0.1517789f, 0.6065295f, -1f, -0.1961461f, 0.8623101f }, { 0.08965126f, -0.4352514f, -0.3375702f, -0.4996337f, -0.1565318f, -0.1407442f, -0.5646783f, -1f, 1f, -0.70481f, 0.1075641f, -0.4429588f, -0.7535374f, -0.4034509f, -0.3162392f, 1f, 0.8715886f, -0.04665816f, -1f }, { -0.6207582f, -1f, 0.2129913f, -0.5788754f, 0.4758462f, -1f, 0.7241607f, -0.91459f, 1f, -0.02551937f, 0.5688915f, 0.3148913f, 0.08718204f, -1f, -1f, 1f, 0.1773171f, -1f, -0.2503559f }, { -1f, -0.2616752f, -0.1426256f, -1f, 0.9411407f, -0.5588006f, 1f, -1f, -1f, -0.9994535f, 1f, -0.7094383f, 1f, -0.4575835f, 0.2851262f, 0.2527227f, 0.309705f, -0.05712906f, 0.2911886f }, { 1f, 0.7544776f, -0.8800527f, -0.2109674f, -0.1401159f, -1f, 1f, -0.5517132f, -0.2969232f, -0.8427482f, 0.5612431f, -1f, -0.5572125f, -1f, 0.2768571f, 0.9672655f, -0.3101393f, 0.9662039f, -0.3478462f }, { -0.3057038f, 0.8323988f, -0.7752833f, -1f, -0.5709307f, -0.8208011f, 1f, 0.7335176f, -0.4639595f, 1f, 1f, -0.05722809f, 0.2088161f, 0.05480233f, 1f, 1f, 1f, 0.5430013f, 0.4216893f }, { 1f, -0.5141761f, 0.8632443f, -0.1172453f, 0.4733334f, 0.8105611f, -0.2670318f, -0.2395538f, 0.5787505f, -1f, -0.7407061f, -0.9885049f, 0.3969826f, 0.2539584f, -1f, 1f, 1f, -0.04382825f, -0.5561616f }, { 0.3649819f, 0.1707068f, 0.5510572f, -0.5973459f, -0.2370265f, -0.2651305f, -0.5665016f, -1f, -0.3698189f, -0.4536895f, 0.3572124f, 1f, 0.1198728f, 1f, 1f, 0.3530924f, 0.084824f, 1f, 0.3679784f }, { 1f, -1f, 0.5065618f, -1f, 0.4180558f, 0.9635028f, 0.7111127f, 0.0538674f, 0.5121626f, 1f, -0.5847829f, 0.2789498f, 1f, -1f, -0.1435656f, -1f, 1f, -0.3247221f, 0.8531663f }, { 0.01731831f, -0.6635599f, -0.3540509f, 1f, 1f, 0.535412f, 0.484288f, 0.6337081f, 1f, -1f, 0.5318859f, -0.1128253f, -0.004334301f, 0.8369223f, -0.1653848f, -0.5872931f, -1f, 0.8370696f, 0.3802696f }, { 0.06592637f, -1f, 1f, 1f, 0.545637f, -1f, 1f, -1f, -1f, -0.01373601f, -0.08922628f, 0.8944715f, -1f, 0.04249406f, 0.96723f, 0.2611226f, -0.7066492f, 0.5324861f, -1f }, { -0.2932478f, 0.9667159f, 0.8526913f, 0.321759f, 0.2012047f, -0.01196754f, 1f, -0.3265025f, -0.3138025f, -1f, -1f, -0.6391751f, 1f, 0.3031825f, 0.9131389f, 1f, -0.3258226f, -1f, 0.4331051f }, { 0.5067308f, -0.09872389f, -0.6265897f, 0.528895f, -0.7719463f, 1f, 0.5878253f, -1f, -0.3564778f, -1f, 0.2100209f, 1f, 1f, 1f, 0.08223635f, 0.4764518f, 0.1904304f, -1f, 0.487508f }, { -1f, -0.2428448f, -0.3436007f, 1f, -1f, 0.464156f, -0.246096f, 0.4932079f, 1f, 1f, 0.08859384f, 0.5870585f, 0.5340457f, 0.4897527f, -0.4724693f, -1f, -0.6323366f, -1f, 1f }, { -1f, -0.04392499f, 1f, -0.9580466f, -0.80611f, 0.4125614f, 0.1473981f, -1f, -0.1042672f, 0.9774834f, 1f, -1f, -0.1868556f, -0.005955219f, -0.1905884f, 0.450284f, -1f, -0.8302282f, 0.599472f }, { 0.2839323f, 1f, -1f, -1f, -0.1064666f, 0.8247341f, 0.6100573f, 0.2175233f, -0.291083f, 0.2285776f, 0.6661564f, 0.4612671f, -0.635718f, 1f, -0.1116893f, -0.6023338f, 1f, -1f, 1f }, { -0.8953349f, -0.1277531f, 1f, 0.9154423f, -1f, 1f, 0.603928f, 0.3282153f, -0.2575724f, -1f, -0.04861253f, -0.9286757f, -1f, 1f, 0.4940826f, 0.2975433f, -1f, -1f, -0.4107311f } }
;
        static float[,] GToOut = { { -1f, -0.28084f, -0.1328048f, -1f, 0.7482477f, 1f, 0.5336648f, 0.9089469f, 0.9406006f, -0.7376657f, -1f, 1f, 1f, -0.06587463f, -1f, -0.5075627f, -0.6877357f, -0.6278274f, -1f }, { 1f, -1f, 0.9504104f, 0.6003623f, -1f, 1f, -0.3791209f, 0.8083004f, -0.02375299f, -0.1206958f, 1f, 0.2040309f, -0.5476891f, 1f, -0.4698106f, -0.197402f, -0.8250167f, 0.2953506f, -0.6993506f }, { -1f, 0.8909199f, 0.6080672f, 0.7182926f, 0.2754571f, -0.502107f, 1f, 0.8744308f, 0.969076f, 1f, -1f, -0.5868344f, 0.1595385f, -1f, -1f, 0.1719385f, 1f, 1f, -0.9928567f }, { -0.6169038f, 0.8847907f, -0.1979499f, -1f, -0.1844344f, -1f, -0.8753714f, 0.9019825f, 0.9036681f, 0.894027f, -1f, -0.5249925f, 1f, 1f, -0.5688715f, 0.9530828f, 0.1798849f, 1f, 0.8168947f } }
;
        static Brain brain = new Brain(new Matrix(InToF), new Matrix(FToG), new Matrix(GToOut));
        Snake snake = new Snake(brain);
        float interval = 100f;
        float FrameWork = 1;
        public static int maxscore = 0;
        public Form1()
        {
            InitializeComponent();
        }
        private void timer_Tick(object sender, EventArgs e)
        {
            for (int i = 0; i < FrameWork; i++)
            {
                snake.Step();
                if (!snake.IsAlive)
                {
                    if (snake.Apples > maxscore)
                        maxscore = Convert.ToInt32(snake.Apples);
                    snake = new Snake(brain);
                }
            }
            Invalidate();
        }
        private void Form1_Paint(object sender, PaintEventArgs e)
        {
            snake.Draw(e.Graphics);
        }
        private void Form1_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == '+' || e.KeyChar == '=')
                timer.Interval = 1;//Faster();
            else if (e.KeyChar == '-')
                timer.Interval = 100;//Slower();
            else if (e.KeyChar == ']')
                FrameWork = 100;//Math.Min(1000, FrameWork + 1);
            else if (e.KeyChar == '[')
                FrameWork = 1;//Math.Max(1, FrameWork - 1);
        }
        private void Faster()
        {
            interval = (int)Math.Max(1, interval * 0.8);
            timer.Interval = (int)interval;
        }
        private void Slower()
        {
            interval = interval / 0.5f;
            timer.Interval = (int)interval;
        }
    }
}
